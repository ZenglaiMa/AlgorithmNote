
// 题目: 输出所有形如aabb的四位完全平方数.
// 该题结果为7744, 所以该题也称为 7744问题.

#include <stdio.h>
#include <math.h>

int main(void) {

    int n, m;
    for(int a = 1; a <= 9; a++){
        for(int b = 0; b <= 9; b++) {
            n = a * 1100 + b * 11;
            m = floor(sqrt(n * 1.0) + 0.5); // floor() 向下取整函数, 定义在 <math.h> 中.
            if(m * m == n) {
                printf("%d\n", n);
            }
        }
    }
    
    return 0;
}

// note: 判断正整数数 n 是否为完全平方数, 理论上可以根据 sqrt(n * 1.0) == floor(sqrt(n * 1.0)) 判断,
//       如果 n 确实为完全平方数, 则其平方根为整数, 向下取整后还是它本身; 如果 n 不是完全平方数, 则其平方根
//       必然为小数, 小数向下取整后和原有值肯定不相等. 可是这样写却不保险, 因为浮点数的运算可能存在误差, 比如
//       经过大量运算后整数1变成了0.99999999, 此时floor的结果会是0, 为了减小误差的影响, 通常使用四舍五入, 
//       即 floor(x + 0.5).